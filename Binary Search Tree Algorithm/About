This is a part of assignment of "Algorithms using Java" Using java (CS 501).
This project is a Based on following instruction by professor :

    1. Create a class called Node. This class should have the followings: 
        • A data member to hold a key that is an int value 
        • It has data members that point to parent, left, and right nodes 
        • A constructor that takes the key value    
        
    2.  Create a binary search tree class. This class should have the followings: 
        • A data member that points to the root node of the tree 
        • A constructor that takes an int[] array as argument and build the BST from the array 
          (each node is an object created from class Node) 
        • An iterativeSearch method that can be used to search for a node with the given key value 
        • A insert method to insert a node into the tree 
        • A successor method that finds the successor for a given node 
        • A minimum method that finds the minimum value in any of the subtrees, 
          given a node x (not just from the root and not just the minimum of the entire input array) 
        • An inorderTreeWalk method that can be used to display the results from the in-order tree  walk, starting from any given node  
 
    3.  Add the main method inside of the binary search tree class to test your codes. Your tests should do the followings:   
        • Use the input array  A = {10, 15, 12, 7, 8, 5, 6, 9, 20, 18, 22} 
        • Build the binary search tree for this input 
        • Do the inorderTreeWalk to display the results (this should show the sorted list) 
        • Use the minimum method to find the minimum, starting from the node with key = 10 
        • Find the successor to the root node, and display the result on the screen 
        • Find the successor to node with key = 9, and display the result on the screen  
 
    The output from running the program should display on the screen as follows:  
 
   Inorder tree walk: 5 6 7 8 9 10 12 15 18 20 22  
   Minimum from node.key = 10 is [the result] 
   Successor to the root node is [the result] 
   Successor to the node.key = 9 is [the result]
